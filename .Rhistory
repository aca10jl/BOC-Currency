gbp <- read.csv("GBP.csv", header = TRUE)
usd <- read.csv("USD.csv", header = TRUE)
# remove duplicated rows
gbp <- gbp[!duplicated(gbp), ]
usd <- usd[!duplicated(usd), ]
rownames(gbp) <- 1:nrow(gbp)
rownames(usd) <- 1:nrow(usd)
# sort the two dataframe by date and time in increasing order
isDate <- function(mydate, date.format = "%Y-%m-%d %H:%M:%S") {
tryCatch(!is.na(as.Date(mydate, date.format)),
error = function(err) {FALSE})
}
length(which(!isDate(gbp$发布时间))) > 0
which(!isDate(gbp$发布时间))
gbp$发布时间[which(!isDate(gbp$发布时间))]
as.POSIXct(gbp$发布时间[which(!isDate(gbp$发布时间))], format = "%Y.%m.%d %H:%M:%S", tz = "CST")
gbp$发布时间[which(!isDate(gbp$发布时间))]
invalidDate <- which(!isDate(gbp$发布时间))
if (length(invalidDate) > 0) {
gbp$发布时间[invalidDate] <- as.POSIXct(gbp$发布时间[invalidDate], format = "%Y.%m.%d %H:%M:%S", tz = "CST")
}
gbp$发布时间
gbp$发布时间[nrow(gbp)]
# read data from CSV files
gbp <- read.csv("GBP.csv", header = TRUE)
usd <- read.csv("USD.csv", header = TRUE)
invalidDate <- which(!isDate(gbp$发布时间))
if (length(invalidDate) > 0) {
gbp$发布时间[invalidDate] <- as.POSIXct(gbp$发布时间[invalidDate], format = "%Y.%m.%d %H:%M:%S", tz = "CST")
}
gbp$发布时间[nrow(gbp)]
# set working environment
rm(list=ls())
setwd("~/Dropbox/Apps/BOC-Currency")
# read data from CSV files
gbp <- read.csv("GBP.csv", header = TRUE)
usd <- read.csv("USD.csv", header = TRUE)
# remove duplicated rows
gbp <- gbp[!duplicated(gbp), ]
usd <- usd[!duplicated(usd), ]
rownames(gbp) <- 1:nrow(gbp)
rownames(usd) <- 1:nrow(usd)
# sort the two dataframe by date and time in increasing order
isDate <- function(mydate, date.format = "%Y-%m-%d %H:%M:%S") {
tryCatch(!is.na(as.Date(mydate, date.format)),
error = function(err) {FALSE})
}
invalidDate <- which(!isDate(gbp$发布时间))
invalidDate
gbp$发布时间[invalidDate]
gbp$发布时间[invalidDate]
as.POSIXct(gbp$发布时间[invalidDate], format = "%Y.%m.%d %H:%M:%S", tz = "CST")
# read data from CSV files
gbp <- read.csv("GBP.csv", header = TRUE)
as.POSIXct(gbp$发布时间[invalidDate], format = "%Y.%m.%d %H:%M:%S", tz = "CST")
# read data from CSV files
gbp <- read.csv("GBP.csv", header = TRUE)
as.POSIXct(gbp$发布时间[invalidDate], format = "%Y.%m.%d %H:%M:%S", tz = "CST")
gbp$发布时间[invalidDate] <- as.POSIXct(gbp$发布时间[invalidDate], format = "%Y.%m.%d %H:%M:%S", tz = "CST")
invalidDate
as.POSIXct(gbp$发布时间[invalidDate], format = "%Y.%m.%d %H:%M:%S", tz = "CST")
invalidDate
gbp$发布时间[invalidDate]
# read data from CSV files
gbp <- read.csv("GBP.csv", header = TRUE)
gbp$发布时间[invalidDate]
as.POSIXct(gbp$发布时间[invalidDate], format = "%Y.%m.%d %H:%M:%S", tz = "CST")
gbp$发布时间[invalidDate] <- as.POSIXct(gbp$发布时间[invalidDate], format = "%Y.%m.%d %H:%M:%S", tz = "CST")
# set working environment
rm(list=ls())
setwd("~/Dropbox/Apps/BOC-Currency")
# read data from CSV files
gbp <- read.csv("GBP.csv", header = TRUE)
usd <- read.csv("USD.csv", header = TRUE)
# remove duplicated rows
gbp <- gbp[!duplicated(gbp), ]
usd <- usd[!duplicated(usd), ]
rownames(gbp) <- 1:nrow(gbp)
rownames(usd) <- 1:nrow(usd)
# sort the two dataframe by date and time in increasing order
isDate <- function(mydate, date.format = "%Y-%m-%d %H:%M:%S") {
tryCatch(!is.na(as.Date(mydate, date.format)),
error = function(err) {FALSE})
}
invalidDate <- which(!isDate(gbp$发布时间))
if (length(invalidDate) > 0) {
gbp$发布时间[invalidDate] <- as.POSIXct(gbp$发布时间[invalidDate], format = "%Y.%m.%d %H:%M:%S", tz = "CST")
}
gbp$发布时间[invalidDate]
# set working environment
rm(list=ls())
setwd("~/Dropbox/Apps/BOC-Currency")
# read data from CSV files
gbp <- read.csv("GBP.csv", header = TRUE)
usd <- read.csv("USD.csv", header = TRUE)
# remove duplicated rows
gbp <- gbp[!duplicated(gbp), ]
usd <- usd[!duplicated(usd), ]
rownames(gbp) <- 1:nrow(gbp)
rownames(usd) <- 1:nrow(usd)
# sort the two dataframe by date and time in increasing order
isDate <- function(mydate, date.format = "%Y-%m-%d %H:%M:%S") {
tryCatch(!is.na(as.Date(mydate, date.format)),
error = function(err) {FALSE})
}
invalidDate <- which(!isDate(gbp$发布时间))
gbp$发布时间[invalidDate]
as.POSIXct(gbp$发布时间[invalidDate], format = "%Y.%m.%d %H:%M:%S", tz = "CST")
?read.csv
default.stringsAsFactors()
# set working environment
rm(list=ls())
setwd("~/Dropbox/Apps/BOC-Currency")
# read data from CSV files
gbp <- read.csv("GBP.csv", header = TRUE, stringsAsFactors = FALSE)
usd <- read.csv("USD.csv", header = TRUE, stringsAsFactors = FALSE)
# remove duplicated rows
gbp <- gbp[!duplicated(gbp), ]
usd <- usd[!duplicated(usd), ]
rownames(gbp) <- 1:nrow(gbp)
rownames(usd) <- 1:nrow(usd)
# sort the two dataframe by date and time in increasing order
isDate <- function(mydate, date.format = "%Y-%m-%d %H:%M:%S") {
tryCatch(!is.na(as.Date(mydate, date.format)),
error = function(err) {FALSE})
}
invalidDate <- which(!isDate(gbp$发布时间))
if (length(invalidDate) > 0) {
gbp$发布时间[invalidDate] <- as.POSIXct(gbp$发布时间[invalidDate], format = "%Y.%m.%d %H:%M:%S", tz = "CST")
}
gbp$发布时间
gbp$发布时间[nrow(gbp)]
gbp$发布时间[nrow(gbp) - 1]
gbp$发布时间[(nrow(gbp) - 1) : nrow(gbp)]
as.POSIXct(gbp$发布时间[invalidDate], format = "%Y.%m.%d %H:%M:%S", tz = "CST")
# read data from CSV files
gbp <- read.csv("GBP.csv", header = TRUE, stringsAsFactors = FALSE)
usd <- read.csv("USD.csv", header = TRUE, stringsAsFactors = FALSE)
# remove duplicated rows
gbp <- gbp[!duplicated(gbp), ]
usd <- usd[!duplicated(usd), ]
rownames(gbp) <- 1:nrow(gbp)
rownames(usd) <- 1:nrow(usd)
# sort the two dataframe by date and time in increasing order
isDate <- function(mydate, date.format = "%Y-%m-%d %H:%M:%S") {
tryCatch(!is.na(as.Date(mydate, date.format)),
error = function(err) {FALSE})
}
invalidDate <- which(!isDate(gbp$发布时间))
as.POSIXct(gbp$发布时间[invalidDate], format = "%Y.%m.%d %H:%M:%S", tz = "CST")
gbp$发布时间[invalidDate]
gbp$发布时间[invalidDate] <- as.POSIXct(gbp$发布时间[invalidDate], format = "%Y.%m.%d %H:%M:%S", tz = "CST")
gbp$发布时间[invalidDate]
# read data from CSV files
gbp <- read.csv("GBP.csv", header = TRUE, stringsAsFactors = FALSE)
as.Date(gbp$发布时间[invalidDate], format = "%Y.%m.%d %H:%M:%S", tz = "CST")
as.POSIXct(gbp$发布时间[invalidDate], format = "%Y.%m.%d %H:%M:%S", tz = "CST")
as.character(as.POSIXct(gbp$发布时间[invalidDate], format = "%Y.%m.%d %H:%M:%S", tz = "CST"))
gbp$发布时间[invalidDate] <- as.character(as.POSIXct(gbp$发布时间[invalidDate], format = "%Y.%m.%d %H:%M:%S", tz = "CST"))
gbp$发布时间[invalidDate]
# set working environment
rm(list=ls())
setwd("~/Dropbox/Apps/BOC-Currency")
# read data from CSV files
gbp <- read.csv("GBP.csv", header = TRUE, stringsAsFactors = FALSE)
usd <- read.csv("USD.csv", header = TRUE, stringsAsFactors = FALSE)
# remove duplicated rows
gbp <- gbp[!duplicated(gbp), ]
usd <- usd[!duplicated(usd), ]
rownames(gbp) <- 1:nrow(gbp)
rownames(usd) <- 1:nrow(usd)
# sort the two dataframe by date and time in increasing order
isDate <- function(mydate, date.format = "%Y-%m-%d %H:%M:%S") {
tryCatch(!is.na(as.Date(mydate, date.format)),
error = function(err) {FALSE})
}
invalidDate <- which(!isDate(gbp$发布时间))
if (length(invalidDate) > 0) {
gbp$发布时间[invalidDate] <- as.character(as.POSIXct(gbp$发布时间[invalidDate], format = "%Y.%m.%d %H:%M:%S", tz = "CST"))
}
invalidDate <- which(!isDate(usd$发布时间))
if (length(invalidDate) > 0) {
usd$发布时间[invalidDate] <- as.character(as.POSIXct(usd$发布时间[invalidDate], format = "%Y.%m.%d %H:%M:%S", tz = "CST"))
}
gbp <- gbp[order(gbp$发布时间, decreasing = FALSE), ]
usd <- usd[order(usd$发布时间, decreasing = FALSE), ]
plot(gbp$现汇卖出价, type = "l", col = "red", xlab = paste("Time from", as.character(gbp$发布时间[1]), "to", as.character(gbp$发布时间[nrow(gbp)]), sep=" "), ylab = "GBP", main = "GBP Exchange Rate (Bank of China)")
# set working environment
rm(list=ls())
setwd("~/Dropbox/Apps/BOC-Currency")
# read data from CSV files
gbp <- read.csv("GBP.csv", header = TRUE, stringsAsFactors = FALSE)
usd <- read.csv("USD.csv", header = TRUE, stringsAsFactors = FALSE)
# remove duplicated rows
gbp <- gbp[!duplicated(gbp), ]
usd <- usd[!duplicated(usd), ]
rownames(gbp) <- 1:nrow(gbp)
rownames(usd) <- 1:nrow(usd)
# sort the two dataframe by date and time in increasing order
isDate <- function(mydate, date.format = "%Y-%m-%d %H:%M:%S") {
tryCatch(!is.na(as.Date(mydate, date.format)),
error = function(err) {FALSE})
}
invalidDate <- which(!isDate(gbp$发布时间))
if (length(invalidDate) > 0) {
gbp$发布时间[invalidDate] <- as.character(as.POSIXct(gbp$发布时间[invalidDate], format = "%Y.%m.%d %H:%M:%S", tz = "CST"))
}
invalidDate <- which(!isDate(usd$发布时间))
if (length(invalidDate) > 0) {
usd$发布时间[invalidDate] <- as.character(as.POSIXct(usd$发布时间[invalidDate], format = "%Y.%m.%d %H:%M:%S", tz = "CST"))
}
gbp <- gbp[order(gbp$发布时间, decreasing = FALSE), ]
usd <- usd[order(usd$发布时间, decreasing = FALSE), ]
plot(gbp$现汇卖出价, type = "l", col = "red", xlab = paste("Time from", as.character(gbp$发布时间[1]), "to", as.character(gbp$发布时间[nrow(gbp)]), sep=" "), ylab = "GBP", main = "GBP Exchange Rate (Bank of China)")
plot(usd$现汇卖出价, type = "l", col = "blue", xlab = paste("Time from", as.character(usd$发布时间[1]), "to", as.character(usd$发布时间[nrow(usd)]), sep=" "), ylab = "USD", main = "USD Exchange Rate (Bank of China)")
# set working environment
rm(list=ls())
setwd("~/Dropbox/Apps/BOC-Currency")
# read data from CSV files
gbp <- read.csv("GBP.csv", header = TRUE, stringsAsFactors = FALSE)
usd <- read.csv("USD.csv", header = TRUE, stringsAsFactors = FALSE)
# remove duplicated rows
gbp <- gbp[!duplicated(gbp), ]
usd <- usd[!duplicated(usd), ]
rownames(gbp) <- 1:nrow(gbp)
rownames(usd) <- 1:nrow(usd)
# sort the two dataframe by date and time in increasing order
isDate <- function(mydate, date.format = "%Y-%m-%d %H:%M:%S") {
tryCatch(!is.na(as.Date(mydate, date.format)),
error = function(err) {FALSE})
}
invalidDate <- which(!isDate(gbp$发布时间))
if (length(invalidDate) > 0) {
gbp$发布时间[invalidDate] <- as.character(as.POSIXct(gbp$发布时间[invalidDate], format = "%Y.%m.%d %H:%M:%S", tz = "CST"))
}
invalidDate <- which(!isDate(usd$发布时间))
if (length(invalidDate) > 0) {
usd$发布时间[invalidDate] <- as.character(as.POSIXct(usd$发布时间[invalidDate], format = "%Y.%m.%d %H:%M:%S", tz = "CST"))
}
gbp <- gbp[order(gbp$发布时间, decreasing = FALSE), ]
usd <- usd[order(usd$发布时间, decreasing = FALSE), ]
# plot
png(filename = "GBP.png")
plot(gbp$现汇卖出价, type = "l", col = "red", xlab = paste("Time from", as.character(gbp$发布时间[1]), "to", as.character(gbp$发布时间[nrow(gbp)]), sep=" "), ylab = "GBP", main = "GBP Exchange Rate (Bank of China)")
dev.off()
png(filename = "USD.png")
plot(usd$现汇卖出价, type = "l", col = "blue", xlab = paste("Time from", as.character(usd$发布时间[1]), "to", as.character(usd$发布时间[nrow(usd)]), sep=" "), ylab = "USD", main = "USD Exchange Rate (Bank of China)")
dev.off()
# save processed data back into original files
write.csv(gbp, file = "GBP.csv", row.names = FALSE)
write.csv(usd, file = "USD.csv", row.names = FALSE)
install.packages("ggplot2")
library("ggplot2", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
dat <- data.frame(x = c(rnorm(100), rnorm(100, 10, 2))
, y = c(rnorm(100), rlnorm(100, 9, 2))
, index = rep(1:2, each = 100)
)
require(ggplot2)
ggplot(dat, aes(x,y)) +
geom_point() +
facet_wrap(~ index, scales = "free_y")
rescale <- function(vec, lims=range(vec), clip=c(0, 1)) {
# find the coeficients of transforming linear equation
# that maps the lims range to (0, 1)
slope <- (1 - 0) / (lims[2] - lims[1])
intercept <- - slope * lims[1]
xformed <- slope * vec + intercept
# do the clipping
xformed[xformed < 0] <- clip[1]
xformed[xformed > 1] <- clip[2]
xformed
}
ggplot(d, aes(position)) +
geom_line(aes(y = rescale(fst))) +
geom_line(aes(y = rescale(coverage))) +
facet_wrap(~chrom)
plotrix
install.packages("plotrix")
detach("package:ggplot2", unload=TRUE)
library("plotrix", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
example(twoord.plot)
data<-read.table(text=
"e0AL fxAL e0CO fxCO e0BR fxBR anos
51.8  5.9 50.6  6.8 51.0  6.2 1955
54.7  5.9 55.2  6.8 53.5  6.2 1960
57.1  6.0 57.9  6.8 55.9  6.2 1965
59.1  5.6 60.1  6.2 57.9  5.4 1970
61.2  5.1 61.8  5.0 59.8  4.7 1975
63.4  4.5 64.0  4.3 61.8  4.3 1980
65.4  3.9 66.9  3.7 63.5  3.8 1985
67.3  3.4 68.0  3.2 65.5  3.1 1990
69.1  3.0 68.7  3.0 67.5  2.6 1995
70.9  2.8 70.3  2.8 69.5  2.5 2000
72.4  2.5 71.7  2.6 71.1  2.3 2005
73.3  2.3 72.9  2.5 72.1  1.9 2010
74.3  2.2 73.8  2.4 73.2  1.8 2015
75.2  2.0 74.6  2.3 74.2  1.7 2020
76.0  2.0 75.4  2.2 75.2  1.6 2025
76.8  1.9 76.2  2.1 76.1  1.6 2030
77.6  1.9 76.9  2.1 77.1  1.6 2035
78.4  1.9 77.6  2.0 77.9  1.7 2040
79.1  1.8 78.3  1.9 78.7  1.7 2045
79.8  1.8 79.0  1.9 79.5  1.7 2050
80.5  1.8 79.7  1.9 80.3  1.7 2055
81.1  1.8 80.3  1.8 80.9  1.8 2060
81.7  1.8 80.9  1.8 81.6  1.8 2065
82.3  1.8 81.4  1.8 82.2  1.8 2070
82.8  1.8 82.0  1.7 82.8  1.8 2075
83.3  1.8 82.5  1.7 83.4  1.9 2080
83.8  1.8 83.0  1.7 83.9  1.9 2085
84.3  1.9 83.5  1.8 84.4  1.9 2090
84.7  1.9 83.9  1.8 84.9  1.9 2095
85.1  1.9 84.3  1.8 85.4  1.9 2100", header=T)
require(plotrix)
twoord.stackplot(lx=data$anos, rx=data$anos,
ldata=cbind(data$e0AL, data$e0BR, data$e0CO),
rdata=cbind(data$fxAL, data$fxBR, data$fxCO),
lcol=c("black","red", "blue"),
rcol=c("black","red", "blue"),
ltype=c("l","o","b"),
rtype=c("l","o","b"),
lylab="Años de Vida", rylab="Hijos x Mujer",
xlab="Tiempo",
main="Mortalidad/Fecundidad:1950–2100",
border="grey80")
legend("bottomright", c(paste("Proy:",
c("A. Latina", "Brasil", "Colombia"))), cex=1,
col=c("black","red", "blue"), lwd=2, bty="n",
lty=c(1,1,2), pch=c(NA,1,1) )
twoord.plot(2:10,going_up,1:15,going_down,xlab="Sequence",
lylim=range(going_up)+c(-1,10),rylim=range(going_down)+c(-10,2),
type=c("bar","l"),ylab="Ascending values",ylab.at=5,
rylab="Descending values",rylab.at=65,
main="Bars on left axis, lines on right axis",
lytickpos=3:7,rytickpos=seq(55,75,by=5),
lcol=3,rcol=4,do.first="plot_bg()")
xval1 <- seq.Date(as.Date("2017-01-02"),
as.Date("2017-01-10"), by="day")
xval2 <- seq.Date(as.Date("2017-01-01"),
as.Date("2017-01-15"), by="day")
going_up<-seq(3,7,by=0.5)+rnorm(9)
going_down<-rev(60:74)+rnorm(15)
twoord.plot(2:10,going_up,1:15,going_down,xlab="Sequence",
ylab="Ascending values",rylab="Descending values",lcol=4,
main="Plot with two ordinates - points and lines",
do.first="plot_bg();grid(col=\"white\",lty=1)")
twoord.plot(1:nrow(gbp), gbp$现汇卖出价, 1:nrow(usd), usd$现汇卖出价, xlab="Time",
ylab="GBP",rylab="USD",lcol=4,
main="Plot with two ordinates - points and lines",
do.first="plot_bg();grid(col=\"white\",lty=1)")
?twoord.plot
twoord.plot(1:nrow(gbp), gbp$现汇卖出价, 1:nrow(usd), usd$现汇卖出价, xlab="Time",
ylab="GBP", rylab="USD", lcol=4, type = "l",
main="Plot with two ordinates - points and lines",
do.first="plot_bg();grid(col=\"white\",lty=1)")
twoord.plot(1:nrow(gbp), gbp$现汇卖出价, 1:nrow(usd), usd$现汇卖出价, xlab="Time",
ylab="GBP", rylab="USD", lcol=4, type = "l",
main="Bank of China Exchange Rate")
twoord.plot(1:nrow(gbp), gbp$现汇卖出价, 1:nrow(usd), usd$现汇卖出价, xlab="Time",
ylab="GBP", rylab="USD", lcol=4, type = "l",
main="Bank of China Exchange Rate",
do.first="plot_bg();grid(col=\"white\",lty=1)")
png(filename = "BOC.png")
twoord.plot(1:nrow(gbp), gbp$现汇卖出价, 1:nrow(usd), usd$现汇卖出价, xlab="Time",
ylab="GBP", rylab="USD", lcol=4, type = "l",
main="Bank of China Exchange Rate",
do.first="plot_bg();grid(col=\"white\",lty=1)")
dev.off()
twoord.plot(1:nrow(gbp), gbp$现汇卖出价, 1:nrow(usd), usd$现汇卖出价, xlab = paste(as.character(gbp$发布时间[1]), "-", as.character(gbp$发布时间[nrow(gbp)]), sep=" "),
ylab = "GBP", rylab = "USD", lcol = 4, type = "l",
main = "Bank of China Exchange Rate",
do.first = "plot_bg();grid(col=\"white\",lty=1)")
twoord.plot(1:nrow(gbp), gbp$现汇卖出价, 1:nrow(usd), usd$现汇卖出价, xlab = paste(as.character(gbp$发布时间[1]), "--", as.character(gbp$发布时间[nrow(gbp)]), sep=" "),
ylab = "GBP", rylab = "USD", lcol = 4, type = "l",
main = "Bank of China Exchange Rate",
do.first = "plot_bg();grid(col=\"white\",lty=1)")
twoord.plot(1:nrow(gbp), gbp$现汇卖出价, 1:nrow(usd), usd$现汇卖出价, xlab = paste(as.character(gbp$发布时间[1]), " - ", as.character(gbp$发布时间[nrow(gbp)]), sep=" "),
ylab = "GBP", rylab = "USD", lcol = 4, type = "l",
main = "Bank of China Exchange Rate",
do.first = "plot_bg();grid(col=\"white\",lty=1)")
twoord.plot(1:nrow(gbp), gbp$现汇卖出价, 1:nrow(usd), usd$现汇卖出价, xlab = paste(as.character(gbp$发布时间[1]), "-", as.character(gbp$发布时间[nrow(gbp)]), sep="  "),
ylab = "GBP", rylab = "USD", lcol = 4, type = "l",
main = "Bank of China Exchange Rate",
do.first = "plot_bg();grid(col=\"white\",lty=1)")
twoord.plot(1:nrow(gbp), gbp$现汇卖出价, 1:nrow(usd), usd$现汇卖出价, xlab = paste(as.character(gbp$发布时间[1]), "-", as.character(gbp$发布时间[nrow(gbp)]), sep="   "),
ylab = "GBP", rylab = "USD", lcol = 4, type = "l",
main = "Bank of China Exchange Rate",
do.first = "plot_bg();grid(col=\"white\",lty=1)")
# set working environment
rm(list=ls())
setwd("~/Dropbox/Apps/BOC-Currency")
# read data from CSV files
gbp <- read.csv("GBP.csv", header = TRUE, stringsAsFactors = FALSE)
usd <- read.csv("USD.csv", header = TRUE, stringsAsFactors = FALSE)
# remove duplicated rows
gbp <- gbp[!duplicated(gbp), ]
usd <- usd[!duplicated(usd), ]
rownames(gbp) <- 1:nrow(gbp)
rownames(usd) <- 1:nrow(usd)
# sort the two dataframe by date and time in increasing order
isDate <- function(mydate, date.format = "%Y-%m-%d %H:%M:%S") {
tryCatch(!is.na(as.Date(mydate, date.format)),
error = function(err) {FALSE})
}
invalidDate <- which(!isDate(gbp$发布时间))
if (length(invalidDate) > 0) {
gbp$发布时间[invalidDate] <- as.character(as.POSIXct(gbp$发布时间[invalidDate], format = "%Y.%m.%d %H:%M:%S", tz = "CST"))
}
invalidDate <- which(!isDate(usd$发布时间))
if (length(invalidDate) > 0) {
usd$发布时间[invalidDate] <- as.character(as.POSIXct(usd$发布时间[invalidDate], format = "%Y.%m.%d %H:%M:%S", tz = "CST"))
}
gbp <- gbp[order(gbp$发布时间, decreasing = FALSE), ]
usd <- usd[order(usd$发布时间, decreasing = FALSE), ]
# plot
png(filename = "BOC.png")
twoord.plot(1:nrow(gbp), gbp$现汇卖出价, 1:nrow(usd), usd$现汇卖出价,
xlab = paste(as.character(gbp$发布时间[1]), "-", as.character(gbp$发布时间[nrow(gbp)]), sep="  "),
ylab = "GBP", rylab = "USD", lcol = 4, type = "l",
main = "Bank of China Exchange Rate",
do.first = "plot_bg();grid(col=\"white\",lty=1)")
dev.off()
# set working environment
rm(list=ls())
setwd("~/Downloads")
df <- read.csv("df.csv", header = TRUE, stringsAsFactors = FALSE)
df
summary(df)
df[order(df$发布时间, decreasing = FALSE), ]
df
df[order(df$发布时间, decreasing = TRUE), ]
# set working environment
rm(list=ls())
setwd("~/Downloads")
df <- read.csv("df.csv", header = TRUE, stringsAsFactors = FALSE)
df[order(df$发布时间, decreasing = TRUE), ]
# set working environment
rm(list=ls())
setwd("~/Downloads")
df <- read.csv("GBP.csv", header = TRUE, stringsAsFactors = FALSE)
df[order(df$发布时间, decreasing = TRUE), ]
View(df)
dff <- df[order(df$发布时间, decreasing = TRUE), ]
View(dff)
# set working environment
rm(list=ls())
setwd("~/Dropbox/Apps/BOC-Currency")
require(plotrix)
# read data from CSV files
gbp <- read.csv("GBP.csv", header = TRUE, stringsAsFactors = FALSE)
usd <- read.csv("USD.csv", header = TRUE, stringsAsFactors = FALSE)
# remove duplicated rows
gbp <- gbp[!duplicated(gbp), ]
usd <- usd[!duplicated(usd), ]
rownames(gbp) <- 1:nrow(gbp)
rownames(usd) <- 1:nrow(usd)
# sort the two dataframe by date and time in increasing order
# isDate <- function(mydate, date.format = "%Y-%m-%d %H:%M:%S") {
#   tryCatch(!is.na(as.Date(mydate, date.format)),
#            error = function(err) {FALSE})
# }
# invalidDate <- which(!isDate(gbp$发布时间))
# if (length(invalidDate) > 0) {
#   gbp$发布时间[invalidDate] <- as.character(as.POSIXct(gbp$发布时间[invalidDate], format = "%Y.%m.%d %H:%M:%S", tz = "CST"))
# }
# invalidDate <- which(!isDate(usd$发布时间))
# if (length(invalidDate) > 0) {
#   usd$发布时间[invalidDate] <- as.character(as.POSIXct(usd$发布时间[invalidDate], format = "%Y.%m.%d %H:%M:%S", tz = "CST"))
# }
gbp <- gbp[order(gbp$发布时间, decreasing = FALSE), ]
usd <- usd[order(usd$发布时间, decreasing = FALSE), ]
# plot
png(filename = "BOC.png")
twoord.plot(1:nrow(gbp), gbp$现汇卖出价, 1:nrow(usd), usd$现汇卖出价,
xlab = paste(as.character(gbp$发布时间[1]), "-", as.character(gbp$发布时间[nrow(gbp)]), sep="  "),
ylab = "GBP", rylab = "USD", lcol = 4, type = "l",
main = "Bank of China Exchange Rate",
do.first = "plot_bg();grid(col=\"white\",lty=1)")
dev.off()
# save processed data back into original files
write.csv(gbp, file = "GBP.csv", row.names = FALSE)
write.csv(usd, file = "USD.csv", row.names = FALSE)
# set working environment
rm(list=ls())
setwd("~/Dropbox/Apps/BOC-Currency")
require(plotrix)
# read data from CSV files
gbp <- read.csv("GBP.csv", header = TRUE, stringsAsFactors = FALSE)
usd <- read.csv("USD.csv", header = TRUE, stringsAsFactors = FALSE)
# remove duplicated rows
gbp <- gbp[!duplicated(gbp), ]
usd <- usd[!duplicated(usd), ]
rownames(gbp) <- 1:nrow(gbp)
rownames(usd) <- 1:nrow(usd)
# sort the two dataframe by date and time in increasing order
gbp <- gbp[order(gbp$发布时间, decreasing = FALSE), ]
usd <- usd[order(usd$发布时间, decreasing = FALSE), ]
# plot
png(filename = "BOC.png")
twoord.plot(1:nrow(gbp), gbp$现汇卖出价, 1:nrow(usd), usd$现汇卖出价,
xlab = paste(as.character(gbp$发布时间[1]), "-", as.character(gbp$发布时间[nrow(gbp)]), sep="  "),
ylab = "GBP", rylab = "USD", lcol = 4, type = "l",
main = "Bank of China Exchange Rate",
do.first = "plot_bg();grid(col=\"white\",lty=1)")
dev.off()
# save processed data back into original files
gbp <- gbp[order(gbp$发布时间, decreasing = TRUE), ]
usd <- usd[order(usd$发布时间, decreasing = TRUE), ]
write.csv(gbp, file = "GBP.csv", row.names = FALSE)
write.csv(usd, file = "USD.csv", row.names = FALSE)
# set working environment
rm(list=ls())
